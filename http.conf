worker_processes auto;

error_log /dev/stdout;

events {
    worker_connections 1024;
}

http {
    log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"body_bytes_sent": $body_bytes_sent, '
        '"request_time": $request_time, '
        '"response_status": $status, '
        '"request": "$request", '
        '"request_method": "$request_method", '
        '"host": "$host",'
        '"upstream_addr": "$upstream_addr",'
        '"http_x_forwarded_for": "$http_x_forwarded_for",'
        '"http_referrer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"http_version": "$server_protocol"}';
    access_log /dev/stdout nginxlog_json;

    lua_shared_dict upstreams 1m;

    init_by_lua_block {
        cjson = require "cjson"
        local upstreams = ngx.shared.upstreams
        local hosts = {
            primary = {"127.0.0.2", 8080},
            secondary = {"127.0.0.3", 8080}
        }
        upstreams:set("upstreams1", cjson.encode(hosts))
    }

    upstream backend {
        server 0.0.0.1; # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"

            local upstreams = ngx.shared.upstreams
            local hosts = cjson.decode(upstreams:get("upstreams1"))

            local ok, err = balancer.set_current_peer(hosts.primary[1], hosts.primary[2])
            if not ok then
                ngx.log(ngx.ERR, "failed to set current peer: ", err)
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
        }
    }

    server {
        listen 80;

        location / {
            proxy_pass http://backend;
        }
    }

    server {
        listen 127.0.0.2:8080;

        location / {
            default_type 'text/plain';

            content_by_lua_block {
                ngx.say('Hello, world!')
            }
        }
    }

    server {
        listen 127.0.0.3:8080;

        location / {
            default_type 'text/plain';

            content_by_lua_block {
                ngx.say('Hello, world!')
            }
        }
    }
}
