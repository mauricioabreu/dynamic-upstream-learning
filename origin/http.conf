worker_processes auto;

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

http {
    log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"body_bytes_sent": $body_bytes_sent, '
        '"request_time": $request_time, '
        '"response_status": $status, '
        '"request": "$request", '
        '"request_method": "$request_method", '
        '"host": "$host",'
        '"upstream_addr": "$upstream_addr",'
        '"http_x_forwarded_for": "$http_x_forwarded_for",'
        '"http_referrer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"http_version": "$server_protocol"}';
    access_log /dev/stdout nginxlog_json;

    lua_shared_dict upstreams 1m;

    init_by_lua_block {
        cjson = require "cjson"
        local upstreams = ngx.shared.upstreams
        local hosts = {
            primary = {"127.0.0.2", 8080},
            secondary = {"127.0.0.3", 8080}
        }
        upstreams:set("upstream1", cjson.encode(hosts))
    }

    init_worker_by_lua_block {
        local requests = require "resty.requests"
        local function update_upstreams()
            local res, err = requests.get{ url = "http://127.0.0.1:8080/upstreams" }
            if not res then
                ngx.log(ngx.ERR, err)
                return
            end
            local upstreams = ngx.shared.upstreams
            for k, v in pairs(res:json()) do
                upstreams:set(k, cjson.encode(v))
            end
        end

        ngx.timer.at(0, update_upstreams)
        ngx.timer.every(10, update_upstreams)
    }

    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

    upstream api {
        server api:8081;
        keepalive 10;
    }

    upstream backend {
        server 0.0.0.1; # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"

            local upstreams = ngx.shared.upstreams
            local hosts = cjson.decode(upstreams:get("upstream1"))

            if not ngx.ctx.tries then
                ngx.ctx.tries = 0
            end

            local host, port = hosts[1][1], hosts[1][2]

            if ngx.ctx.tries < 3 then
                if ngx.ctx.tries == 2 then
                    host = hosts[2][1]
                    port = hosts[2][2]
                end

                local ok, err = balancer.set_more_tries(1)
                if not ok then
                    return error("failed to set more tries: ", err)
                end
            end
            ngx.ctx.tries = ngx.ctx.tries + 1

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set current peer: ", err)
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
        }

        keepalive 10;
    }

    server {
        listen 8080;

        location /upstreams {
            proxy_pass http://api/;
        }

        location / {
            proxy_pass http://backend;
        }
    }

    server {
        listen 127.0.0.2:8080;

        location / {
            return 500;
        }
    }

    server {
        listen 127.0.0.3:8080;

        location / {
            default_type 'text/plain';

            return 200 'Hello, world!';
        }
    }
}
